#!groovy
//  groovy Jenkinsfile
properties([disableConcurrentBuilds()])

pipeline  {
    agent {
        label 'master'
        }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("Create docker image") {
            steps {
                echo 'Creating docker image ...'
                dir('.'){
                    sh "docker build -t macnaer/dfo . "
                }
            }
        }
       stage("docker login") {
           steps {
               echo " ============== docker login =================="
               withCredentials([usernamePassword(credentialsId: 'DockerHub-Credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                   sh '''
                   docker login -u $USERNAME -p $PASSWORD
                   '''
               }
           }
       }
       stage("docker push") {
           steps {
               echo " ============== pushing image =================="
               sh '''
               docker push macnaer/dfo:latest
               '''
           }
       }
       stage("docker stop") {
           steps {
               echo " ============== stoping all images =================="
               sh '''
               docker stop dfo
               '''
           }
       }
       stage("docker remove") {
           steps {
               echo " ============== removing all docker containers =================="
               sh '''
               docker rm dfo
               '''
           }
       }
       stage("docker run") {
           steps {
               echo " ============== starting chatterbox server =================="
                withCredentials([usernamePassword(credentialsId: 'AWS-Credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
               sh '''
               docker -e AWS_ACCESS_KEY_ID=$USERNAME -e AWS_SECRET_ACCESS_KEY=$PASSWORD run -d --restart=always --name dfo macnaer/dfo
               '''
           }
        }
        // stage("Deploy to stage server") {
        //     steps {
        //         echo " ============== Running playbook =================="
        //         sh '''
        //         ansible-playbook toolbox/ansible/playbooks/demloyToStageServer.yml
        //         '''
        //     }
        //}

    }
}